// Copyright 2022 Scott Fauerbach
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at:
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

public class CancellableCountDownLatch {
    private final AtomicInteger count;
    private final CountDownLatch cdl;

    public CancellableCountDownLatch(int count) {
        this.count = new AtomicInteger(count);
        cdl = new CountDownLatch(1);
    }

    public void cancel() {
        count.set(0);
        cdl.countDown();
    }

    public void await() throws InterruptedException {
        cdl.await();
    }

    public boolean await(long timeout, TimeUnit unit) throws InterruptedException {
        return cdl.await(timeout, unit);
    }

    public void countDown() {
        if (count.decrementAndGet() <= 0) {
            cdl.countDown();
        }
    }

    public long getCount() {
        return Math.max(count.get(), 0);
    }

    @Override
    public String toString() {
        return super.toString() + "[Count = " + getCount() + "]";
    }
}
